// stylelint-disable selector-no-qualifying-type

//
// Textual form controls
//

.form-control {
	@include border-radius($input-border-radius);
	@include box-shadow($input-box-shadow);
	@include font-size($input-font-size);
	@include transition($input-transition);
	background-clip  : padding-box;
	background-color : $input-bg;
	border           : 0;
	color            : $input-color;
	width            : 100%;
	
	// Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
	
	// Unstyle the caret on `<select>`s in IE10+.
	&::-ms-expand {
		background-color : transparent;
		border           : 0;
	}
	
	// Placeholder
	&::placeholder {
		color   : $input-placeholder-color;
		// Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
		opacity : 1;
	}
	
	// Disabled and read-only inputs
	//
	// HTML5 says that controls under a fieldset > legend:first-child won't be
	// disabled if the fieldset is disabled. Due to implementation difficulty, we
	// don't honor that edge case; we style them as disabled anyway.
	&:disabled,
	&[readonly] {
		background-color : $input-disabled-bg;
		// iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
		opacity          : 1;
	}
}

select.form-control {
	&:focus::-ms-value {
		// Suppress the nested default white text on blue background highlight given to
		// the selected option text when the (still closed) <select> receives focus
		// in IE and (under certain conditions) Edge, as it looks bad and cannot be made to
		// match the appearance of the native widget.
		// See https://github.com/twbs/bootstrap/issues/19398.
		background-color : $input-bg;
		color            : $input-color;
	}
}

// Make file inputs better match text inputs by forcing them to new lines.


//
// Labels
//

// For use with horizontal and inline forms, when you need the label (or legend)
// text to align with the form controls.


// Readonly controls as plain text
//
// Apply class to a readonly input to make it appear like regular plain
// text (without any border, background color, focus indicator)


// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// Repeated in `_input_group.scss` to avoid Sass extend issues.

// stylelint-disable-next-line no-duplicate-selectors
select.form-control {
	&[size],
	&[multiple] {
		height : auto;
	}
}

textarea.form-control {
	height : auto;
}

// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
	margin-bottom : $form-group-margin-bottom;
}

.form-text {
	display    : block;
	margin-top : $form-text-margin-top;
}


// Form grid
//
// Special replacement for our grid system's `.row` for tighter form layouts.


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.


// Form validation
//
// Provide feedback to users when form field values are valid or invalid. Works
// primarily for client-side validation via scoped `:invalid` and `:valid`
// pseudo-classes but also includes `.is-invalid` and `.is-valid` classes for
// server side validation.

@each $state, $data in $form-validation-states {
	@include form-validation-state($state, map-get($data, color), map-get($data, icon));
}

// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).

